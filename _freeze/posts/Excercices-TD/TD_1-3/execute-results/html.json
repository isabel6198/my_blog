{
  "hash": "4f3719f44dd6da21b43dc0d2da0807e4",
  "result": {
    "markdown": "---\ntitle: \"TD_1_3\"\nformat: html\neditor: visual\ndate: \"2024-02-25\"\nimage: \"exercice.png\"\ncategories: [TD]\n\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(purrr)\nlibrary(stringr)\n\n# penser à vérifer le chemin de travail \ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/Isabel/Desktop/Cours/R avancé/my_blog/posts/Excercices-TD\"\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n# TD 1\n\nExercice\n\nPour cet exercice, nous allons télécharger un jeu de données issu de <https://data.gouv.fr> sur les infrastructures olympiques des JO 2024 à Paris.\n\nL’objectif de cet exercice est d’utiliser uniquement des fonctions de R base. - pas de librairie tierce sauf mention contraire.\n\n## 2. Téléchargement jeu de données depuis le site\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://www.data.gouv.fr/fr/datasets/r/3f8ea372-3847-495d-9b93-c4a76d553166\"\ndata_ex <- read.csv(url, sep = \";\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(data_ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"geo_point\"                      \"nom\"                           \n[3] \"sites_olympiques_paralympiques\" \"sports\"                        \n```\n:::\n\n```{.r .cell-code}\ndim(data_ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 31  4\n```\n:::\n\n```{.r .cell-code}\nstr(data_ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t31 obs. of  4 variables:\n $ geo_point                     : chr  \"48.841319, 2.253076\" \"48.924388, 2.359871\" \"48.751095, 2.0759\" \"48.788046, 2.034987\" ...\n $ nom                           : chr  \"Parc des Princes\" \"Stade de France\" \"Golf national\" \"Vélodrome National de Saint-Quentin-en-Yvelines\" ...\n $ sites_olympiques_paralympiques: chr  \"Site olympique\" \"Site olympique,Site paralympique\" \"Site olympique\" \"Site olympique,Site paralympique\" ...\n $ sports                        : chr  \"Football\" \"Athlétisme,Para athlétisme,Rugby\" \"Golf\" \"Cyclisme sur piste,Para cyclisme sur piste\" ...\n```\n:::\n:::\n\n\nLe nombre de lignes est de 31 pour 4 colonnes nomées : geo_point, nom, sites_olympiques_paralympiques, sports\n\n## 3 et 4 Combien y a t’il de sites olympiques et paralympiques ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(data_ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            geo_point                                             nom\n1 48.841319, 2.253076                                Parc des Princes\n2 48.924388, 2.359871                                 Stade de France\n3   48.751095, 2.0759                                   Golf national\n4 48.788046, 2.034987 Vélodrome National de Saint-Quentin-en-Yvelines\n5  48.84732, 2.245501                             Stade Roland Garros\n6 48.911184, 2.546395                                Clichy-sous-Bois\n    sites_olympiques_paralympiques                                     sports\n1                   Site olympique                                   Football\n2 Site olympique,Site paralympique           Athlétisme,Para athlétisme,Rugby\n3                   Site olympique                                       Golf\n4 Site olympique,Site paralympique Cyclisme sur piste,Para cyclisme sur piste\n5 Site olympique,Site paralympique                Tennis,Tennis fauteuil,Boxe\n6                Site paralympique                    Para cyclisme sur route\n```\n:::\n\n```{.r .cell-code}\ntable(data_ex$sites_olympiques_paralympiques )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n                                                   Site olympique \n                               2                               10 \nSite olympique,Site paralympique                Site paralympique \n                              16                                3 \n```\n:::\n\n```{.r .cell-code}\nsites_olympiques <- 0\nsites_paralympique <- 0\n\nfor (site in data_ex$sites_olympiques_paralympiques) {\n  if( grepl(\"Site olympique\", site)) {\n    sites_olympiques <- sites_olympiques + 1\n  }\n  if(grepl(\"Site paralympique\", site)){\n    sites_paralympique <- sites_paralympique + 1\n  }\n}\n\nprint(paste(\"Il y a au total\", sites_olympiques, \"sites olympiques et\", sites_paralympique, \"sites paralympiques.\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Il y a au total 26 sites olympiques et 19 sites paralympiques.\"\n```\n:::\n:::\n\n\n## 5. Quels sont les sites qui accueillent plusieurs disciplines sportives ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsites_multi_sport <- data_ex[sapply(strsplit(data_ex$sports, \",\"), length) >1, ]\nprint(\"Les sites accueillant plusieurs disciplines sportives sont :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Les sites accueillant plusieurs disciplines sportives sont :\"\n```\n:::\n\n```{.r .cell-code}\nprint(sites_multi_sport$nom)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Stade de France\"                                \n [2] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n [3] \"Stade Roland Garros\"                            \n [4] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"La Défense Arena\"                               \n[12] \"Stade nautique\"                                 \n[13] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[14] \"Stade Tour Eiffel\"                              \n[15] \"Arena La Chapelle\"                              \n[16] \"Centre aquatique\"                               \n[17] \"Château de Versailles\"                          \n[18] \"Grand Palais\"                                   \n[19] \"Invalides\"                                      \n```\n:::\n:::\n\n\n## 6. Quels sont les disciplines para-olympiques accueillies dans ces sites franciliens ?\n\n(franciliens = De l'Île-de-France)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_paralympique <- data_ex[grepl(\"Site paralympique\", data_ex$sites_olympiques_paralympiques), ]\n\ndisciplines_paralympiques <- unique(unlist(strsplit(data_paralympique$sports, \",\")))\n\nprint(paste(\"Les disciplines para-olympiques accueillies sont:\", paste(disciplines_paralympiques, collapse = \", \")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Les disciplines para-olympiques accueillies sont: Athlétisme, Para athlétisme, Rugby, Cyclisme sur piste, Para cyclisme sur piste, Tennis, Tennis fauteuil, Boxe, Para cyclisme sur route, Tennis de table, Para tennis de table, Basketball, Basket fauteuil, Gymnastique artistique, trampoline, Escrime, Pentathlon moderne, Volley-ball assis, Haltérophilie, Handball, Goalball, Judo, Para judo, Lutte, Rugby fauteuil, Natation, Para natation, Water-polo, Canoë, Para canoë, Aviron, Para aviron, Volleyball, Boccia, Volleyball de plage, Cécifoot, Badminton, Para Badminton, Gymnastique rythmique, Para powerlifting, Sports équestres, Para équitation, Escrime fauteuil, Taekwondo, Para taekwondo, Tir à l'arc, Para tir à l'arc, Cyclisme sur route\"\n```\n:::\n:::\n\n\nConcernant le code :\n\nunlist(...) transforme cette liste en un vecteur unique, concaténant tous les éléments des différentes entrées en un seul vecteur long.\n\nunique(...) extrait les éléments uniques de ce vecteur, supprimant les répétitions.\n\n## 7. Quel(s) site(s) accueille(nt) le plus de disciplines différentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(strsplit(data_ex$sports, \",\"), function(x) length(unique(x)) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 3 1 2 3 1 2 1 2 4 4 3 4 1 4 3 4 2 2 1 4 1 3 0 3 0 1 1 4 4 1\n```\n:::\n\n```{.r .cell-code}\nnombre_de_disciplines <- data.frame(site = data_ex$nom, \n                         nombre_disciplines = sapply(strsplit(data_ex$sports, \",\"), function(x) length(unique(x))))\n\nsites_nombre_disciplines <- nombre_de_disciplines[order                                            (-nombre_de_disciplines$nombre_disciplines),]\n\nsites_4_disciplines <- sites_nombre_disciplines[sites_nombre_disciplines$nombre_disciplines>3,]\n\nprint(paste(\"Les sites accueillant les plus de disciplines (4) sont :\", paste(sites_4_disciplines$site, collapse = \",\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Les sites accueillant les plus de disciplines (4) sont : Arena Bercy,Arena Paris nord,Stade de la Concorde,Arena Champs de Mars,Stade nautique,Arena La Chapelle,Grand Palais,Invalides\"\n```\n:::\n:::\n\n\n## 8. Quel discipline aura lieu sur le plus grand nombre de sites ? Quels sont ces sites ?\n\n------------------------------------------------------------------------\n\n# TD 2\n\nExercice\n\n## Question 1\n\nLancez la commande suivante :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_tables <-\n  session(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |>\n  html_elements(\".wikitable\") |>\n  html_table()\n\nlist_tables\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 31 × 11\n   Discipline   Discipline   Années `Nombre de` `Nombre de` `médailles décernés`\n   <chr>        <chr>        <chr>  <chr>       <chr>       <chr>               \n 1 \"Discipline\" Discipline   Années Éditions    Épreuves(e… Or                  \n 2 \"\"           Athlétisme   Depui… 29          48          1028                \n 3 \"\"           Aviron       Depui… 28          14          269                 \n 4 \"\"           Badminton    Depui… 8           5           39                  \n 5 \"\"           Basket-ball  Depui… 20          4           32                  \n 6 \"\"           Boxe         1904,… 26          13          266                 \n 7 \"\"           Canoë-kayak  Depui… 20          16          242                 \n 8 \"\"           Cyclisme(ho… Depui… 29          22          263                 \n 9 \"\"           Équitation   1900,… 26          6           151                 \n10 \"\"           Escrime      Depui… 29          12          223                 \n# ℹ 21 more rows\n# ℹ 5 more variables: `médailles décernés` <chr>, `médailles décernés` <chr>,\n#   `médailles décernés` <chr>,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` <chr>,\n#   `Athlète(s) avec le plus de médailles d'or` <chr>\n\n[[2]]\n# A tibble: 16 × 11\n   Discipline   Discipline   Années `Nombre de` `Nombre de` `médailles décernés`\n   <chr>        <chr>        <chr>  <chr>       <chr>       <chr>               \n 1 \"Discipline\" Discipline   Années Éditions    épreuves e… Or                  \n 2 \"\"           Biathlon     1924,… 16          11          54                  \n 3 \"\"           Bobsleigh    1924-… 21          3           39                  \n 4 \"\"           Combiné nor… Depui… 22          3           28                  \n 5 \"\"           Curling      1924,… 4           2           7                   \n 6 \"\"           Hockey sur … Été :… 23          2           24                  \n 7 \"\"           Luge         Depui… 14          4           37                  \n 8 \"\"           Patinage ar… Été :… 24          4           77                  \n 9 \"\"           Patinage de… Depui… 22          12          152                 \n10 \"\"           Patinage de… Depui… 7           8           32                  \n11 \"\"           Saut à ski   Depui… 22          4           38                  \n12 \"\"           Skeleton     1924,… 6           2           6                   \n13 \"\"           Ski acrobat… Depui… 7           10          18                  \n14 \"\"           Ski alpin    Depui… 19          10          132                 \n15 \"\"           Ski de fond  Depui… 22          12          134                 \n16 \"\"           Snowboard    Depui… 5           10          14                  \n# ℹ 5 more variables: `médailles décernés` <chr>, `médailles décernés` <chr>,\n#   `médailles décernés` <chr>,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` <chr>,\n#   `Athlète(s) avec le plus de médailles d'or` <chr>\n\n[[3]]\n# A tibble: 14 × 8\n   Discipline   Discipline       Années `Nombre d'éditions` `Médailles décernés`\n   <chr>        <chr>            <chr>  <chr>               <chr>               \n 1 \"Discipline\" Discipline       Années Nombre d'éditions   Or                  \n 2 \"\"           Baseball         1992–… 5                   5                   \n 3 \"\"           Pelote basque    1900   1                   1                   \n 4 \"\"           Cricket          1900   1                   1                   \n 5 \"\"           Croquet          1900   1                   3                   \n 6 \"\"           Jeu de paume     1908   1                   1                   \n 7 \"\"           Crosse           1904–… 2                   2                   \n 8 \"\"           Polo             1900,… 5                   5                   \n 9 \"\"           Jeu de raquettes 1908   1                   2                   \n10 \"\"           Roque            1904   1                   1                   \n11 \"\"           Rugby à XV       1900,… 4                   4                   \n12 \"\"           Softball         1996–… 4                   4                   \n13 \"\"           Tir à la corde   1900–… 5                   5                   \n14 \"\"           Motonautisme     1908   5                   3                   \n# ℹ 3 more variables: `Médailles décernés` <chr>, `Médailles décernés` <chr>,\n#   `Médailles décernés` <chr>\n\n[[4]]\n# A tibble: 2 × 8\n  Discipline   Discipline        Années `Nombre d'éditions` `Médailles décernés`\n  <chr>        <chr>             <chr>  <chr>               <chr>               \n1 \"Discipline\" Discipline        Années Nombre d'éditions   Or                  \n2 \"\"           Patrouille milit… 1924   1                   1                   \n# ℹ 3 more variables: `Médailles décernés` <chr>, `Médailles décernés` <chr>,\n#   `Médailles décernés` <chr>\n\n[[5]]\n# A tibble: 30 × 11\n   Jeux  Médaille  Médaille Hôte     Nombred'épreuves(ave…¹ `Médailles décernés`\n   <chr> <chr>     <chr>    <chr>    <chr>                  <chr>               \n 1 Jeux  Médaille  Médaille Hôte     Nombred'épreuves(avec… Or                  \n 2 1896  médaillés tableau  Athènes… 43                     43                  \n 3 1900  médaillés tableau  Paris, … 95                     90                  \n 4 1904  médaillés tableau  Saint-L… 91                     96                  \n 5 1908  médaillés tableau  Londres… 110                    110                 \n 6 1912  médaillés tableau  Stockho… 102                    103                 \n 7 1920  médaillés tableau  Anvers,… 154                    156                 \n 8 1924  médaillés tableau  Paris, … 126                    126                 \n 9 1928  médaillés tableau  Amsterd… 109                    111                 \n10 1932  médaillés tableau  Los Ang… 117                    116                 \n# ℹ 20 more rows\n# ℹ abbreviated name: ¹​`Nombred'épreuves(avec médailles)`\n# ℹ 5 more variables: `Médailles décernés` <chr>, `Médailles décernés` <chr>,\n#   `Médailles décernés` <chr>,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` <chr>,\n#   `Athlète(s) avec le plus de médailles d'or` <chr>\n\n[[6]]\n# A tibble: 24 × 11\n   Jeux  Médaille  Médaille Hôte     Nombred'épreuves(ave…¹ `Médailles décernés`\n   <chr> <chr>     <chr>    <chr>    <chr>                  <chr>               \n 1 Jeux  Médaille  Médaille Hôte     Nombred'épreuves(avec… Or                  \n 2 1924  médaillés tableau  Chamoni… 16                     16                  \n 3 1928  médaillés tableau  Saint-M… 14                     14                  \n 4 1932  médaillés tableau  Lake Pl… 14                     14                  \n 5 1936  médaillés tableau  Garmisc… 17                     17                  \n 6 1948  médaillés tableau  Saint-M… 22                     22                  \n 7 1952  médaillés tableau  Oslo, N… 22                     22                  \n 8 1956  médaillés tableau  Cortina… 24                     25                  \n 9 1960  médaillés tableau  Squaw V… 27                     28                  \n10 1964  médaillés tableau  Innsbru… 34                     34                  \n# ℹ 14 more rows\n# ℹ abbreviated name: ¹​`Nombred'épreuves(avec médailles)`\n# ℹ 5 more variables: `Médailles décernés` <chr>, `Médailles décernés` <chr>,\n#   `Médailles décernés` <chr>,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` <chr>,\n#   `Athlète(s) avec le plus de médailles d'or` <chr>\n```\n:::\n:::\n\n\nQue s’est-il passé ? Que contient l’objet list_tables ?\n\nRecupere l'info de wikipedia et contient une liste de tibbles, chacun représentant un tableau contenant les informations sur les médaillés olympiques.\n\n## Question 2\n\nPremière table.\n\nCréez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete <-  list_tables[[1]]\n```\n:::\n\n\nLa table n’est pas bien formattée.\n\nJe supprime la première colonne, la première ligne et je modifie les noms de colonnes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete <- data_medailles_sport_ete[-1, -1]\n\ncolnames(data_medailles_sport_ete) <- c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\")\n\nstr(data_medailles_sport_ete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [30 × 10] (S3: tbl_df/tbl/data.frame)\n $ Discipline        : chr [1:30] \"Athlétisme\" \"Aviron\" \"Badminton\" \"Basket-ball\" ...\n $ Annees            : chr [1:30] \"Depuis 1896\" \"Depuis 1900\" \"Depuis 1992\" \"Depuis 1936\" ...\n $ Editions          : chr [1:30] \"29\" \"28\" \"8\" \"20\" ...\n $ Epreuves_2020     : chr [1:30] \"48\" \"14\" \"5\" \"4\" ...\n $ Or                : chr [1:30] \"1028\" \"269\" \"39\" \"32\" ...\n $ Argent            : chr [1:30] \"1030\" \"268\" \"39\" \"32\" ...\n $ Bronze            : chr [1:30] \"1027\" \"273\" \"43\" \"32\" ...\n $ Total             : chr [1:30] \"3085\" \"810\" \"121\" \"96\" ...\n $ Athletes_medailles: chr [1:30] \"Paavo Nurmi (FIN) (9-3-0)\" \"Elisabeta Lipă (ROU) (5-2-1)\" \"Gao Ling (CHN) (2-1-1)\" \"Teresa Edwards (USA) (4-0-1)\" ...\n $ Athletes_or       : chr [1:30] \"Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)\" \"Elisabeta Lipă (ROU) (5-2-1) Georgeta Damian (ROU) (5-0-1) Steven Redgrave (GBR) (5-0-1)\" \"Gao Ling (CHN) (2-1-1) Kim Dong-moon (KOR) (2-0-1) Zhang Nan (CHN) (2-0-1) Ge Fei (CHN) (2-0-0) Gu Jun (CHN) (2\"| __truncated__ \"Teresa Edwards (USA) (4-0-1) Sue Bird (USA) (4-0-0) Tamika Catchings (USA) (4-0-0) Lisa Leslie (USA) (4-0-0) Di\"| __truncated__ ...\n```\n:::\n:::\n\n\nLes colonnes Editions, Epreuves_2020, Or, Argent, Bronze, Total seront converties en colonnes d’entiers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete[c(\"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\")] <- lapply(data_medailles_sport_ete[c(\"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\")], as.integer)\n\nstr(data_medailles_sport_ete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [30 × 10] (S3: tbl_df/tbl/data.frame)\n $ Discipline        : chr [1:30] \"Athlétisme\" \"Aviron\" \"Badminton\" \"Basket-ball\" ...\n $ Annees            : chr [1:30] \"Depuis 1896\" \"Depuis 1900\" \"Depuis 1992\" \"Depuis 1936\" ...\n $ Editions          : int [1:30] 29 28 8 20 26 20 29 26 29 27 ...\n $ Epreuves_2020     : int [1:30] 48 14 5 4 13 16 22 6 12 2 ...\n $ Or                : int [1:30] 1028 269 39 32 266 242 263 151 223 34 ...\n $ Argent            : int [1:30] 1030 268 39 32 266 241 261 149 223 34 ...\n $ Bronze            : int [1:30] 1027 273 43 32 472 243 260 148 221 35 ...\n $ Total             : int [1:30] 3085 810 121 96 1004 726 784 448 667 103 ...\n $ Athletes_medailles: chr [1:30] \"Paavo Nurmi (FIN) (9-3-0)\" \"Elisabeta Lipă (ROU) (5-2-1)\" \"Gao Ling (CHN) (2-1-1)\" \"Teresa Edwards (USA) (4-0-1)\" ...\n $ Athletes_or       : chr [1:30] \"Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)\" \"Elisabeta Lipă (ROU) (5-2-1) Georgeta Damian (ROU) (5-0-1) Steven Redgrave (GBR) (5-0-1)\" \"Gao Ling (CHN) (2-1-1) Kim Dong-moon (KOR) (2-0-1) Zhang Nan (CHN) (2-0-1) Ge Fei (CHN) (2-0-0) Gu Jun (CHN) (2\"| __truncated__ \"Teresa Edwards (USA) (4-0-1) Sue Bird (USA) (4-0-0) Tamika Catchings (USA) (4-0-0) Lisa Leslie (USA) (4-0-0) Di\"| __truncated__ ...\n```\n:::\n:::\n\n\n## Question 3\n\nQuelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop3_disciplines <- data_medailles_sport_ete[order(data_medailles_sport_ete$Total, decreasing = TRUE), ][1:3,]\n\ncat(\"Les 3 disciplines avec le plus de médailles sont :\", paste(top3_disciplines$Discipline, collapse = \", \"), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLes 3 disciplines avec le plus de médailles sont : Athlétisme, Natation(hommes, femmes), Lutte \n```\n:::\n:::\n\n\n## Question 4\n\nQuelles sont les disciplines avec le moins d’épreuves en 2020 ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndisc_moins_epreuves_2020 <- data_medailles_sport_ete[(data_medailles_sport_ete$Epreuves_2020 == (min(data_medailles_sport_ete$Epreuves_2020))),] \n# utilisation du min et == pour trouver les epreuves avec le moins d'épreuves\n\ncat(\"Les disciplines avec le moins d'éprevues en 2020 sont:\", paste(disc_moins_epreuves_2020$Discipline, collapse = \",\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLes disciplines avec le moins d'éprevues en 2020 sont: Football,Golf,Handball,Hockey sur gazon,Natation synchronisée,Pentathlon moderne,Volley-ball,Water polo\n```\n:::\n:::\n\n\n## Question 5\n\nLa colonne Editions nous renseigne sur le nombre total d’apparence des disciplines aux JO d’été. Nous souhaitons vérifier ce calcul en implémentant notre propre fonction calcul_nb_editions_int. Dans un premier temps, la fonction calcul_nb_editions prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Premier partie, fonction calcul de nombre d'editions \ncalcul_nb_editions <- function(depuis){\n  # Calcul de l'année en cours pour connaitre le nombre d'année au total\n  annee_actuelle <- as.integer(format(Sys.Date(), \"%Y\"))\n  annees_editions <- seq(depuis, annee_actuelle, 4)\n  nb_edtions <- length(annees_editions)\n  return(nb_edtions)\n}\ncalcul_nb_editions(1896)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 33\n```\n:::\n\n```{.r .cell-code}\n# Sys.Date() est une fonction en R qui retourne la date courante.\n#Formate cette date pour extraire l'année en cours sous forme de chaîne de caractères avec format(…, \"%Y\") et as.integer convertit cette chaîne en un entier avec as.integer()\n```\n:::\n\n\nLa deuxieme partie, consiste à verifier la colonne Editions, à l'aide d'une fonction appelée \\<calcul_nb_editions_int\\> .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data_medailles_sport_ete$Annees)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:30] \"Depuis 1896\" \"Depuis 1900\" \"Depuis 1992\" \"Depuis 1936\" ...\n```\n:::\n:::\n\n\nPour vérifier la colonne Éditions, il est nécessaire de récupérer les informations relatives aux années de participation aux Jeux Olympiques, que ce soit par année individuelle, par plage d'années, ou en continu depuis une année donnée. La colonne des années est définie comme une chaîne de caractères; Il faut donc créer une fonction qui extraira toutes les années et les comptabilisera.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions_str <- function(annee_texte){\n  annee_actuelle <- as.integer(format(Sys.Date(), \"%Y\"))\n  annees <- unlist(str_extract_all(annee_texte, \"\\\\b\\\\d{4}\\\\b\")) # Extraire toutes les années individuelles\n   depuis_annees <- as.integer(unlist(str_extract_all(annee_texte, regex(\"(?<=depuis )\\\\d{4}\", ignore_case = TRUE)))) # Extraire les années de départ pour \"depuis / Depuis \"\n  \n   # Traiter les plages d'années\n  plages <- str_extract_all(annee_texte, \"\\\\d{4}–\\\\d{4}\") # Extraire les plages d'années\n  plages <- unlist(plages)\n  for (plage in plages) {\n    annees_debut_fin <- as.integer(unlist(str_extract_all(plage, \"\\\\d{4}\")))\n    annees <- c(annees, seq(annees_debut_fin[1], annees_debut_fin[2], by = 4))\n  }\n  # Ajouter les éditions depuis les années spécifiques jusqu'à l'année actuelle\n  for (depuis_annee in depuis_annees) {\n    annees_depuis <- seq(depuis_annee, annee_actuelle, by = 4)\n    annees <- c(annees, annees_depuis)\n  }\n   # Calculer le nombre d'éditions uniques\n  nb_editions <- length(unique(as.integer(annees)))\n  \n  return(nb_editions)\n}\n\n\ncomparatif <- data.frame(\n  Edtions = data_medailles_sport_ete$Editions, \n  Editions_a_2024 = sapply(data_medailles_sport_ete$Annees, calcul_nb_editions_str))\n```\n:::\n\n\n::: callout-tip\n## regex(..., ignore_case = TRUE)\n\nEst utilisé pour créer une expression régulière avec l'option ignore_case = TRUE, rendant la recherche insensible à la casse.\n:::\n\n## Question 6\n\nDans certains cas, les disciplines ont été au programme de façon discontinue. Proposez une nouvelle fonction calcul_nb_editions_str qui prendra cette fois-ci en entrée des chaînes de caractères. Par exemple, l’appel suivant: calcul_nb_editions_str(\"1896, 1904, depuis 1920\")\n\n::: callout-note\nLa fonction `calcul_nb_editions_str` a déjà était conçue pour extraire des années individuelles, traiter des plages d'années, et compter les éditions depuis une certaine année jusqu'à l'année actuelle dans la question 6.\n:::\n\nCepandant si les années sont presentés comme une liste ou un vecteur (incluant des valeurs individuelles ), il faut une function tel que :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions.integer <- function(annees_participation) {\n  nb_participations <- length(unique(annees_participation))\n  return(nb_participations)\n}\n\ncalcul_nb_editions.integer(1900)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n## Question 7\n\nDéfinissez une fonction générique calcul_nb_editions et deux implémentations calcul_nb_editions.integer et ‘calcul_nb_editions.character. Quels résultats donnent les appels : calcul_nb_editions(2000) calcul_nb_editions(\"1904–1924, depuis 1948\")\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Définition de la fonction génerique\ncalcul_nb_editions <- function(x) {\n  UseMethod(\"calcul_nb_editions\")\n}\n```\n:::\n\n\nPour les Entiers\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions.integer <- function(x) {\n  nb_participations <- length(unique(x))\n  return(nb_participations)\n}\n```\n:::\n\n\nPour les Chaînes de Caractères\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions.character <- function(x) {\n  annee_actuelle <- as.integer(format(Sys.Date(), \"%Y\"))\n  annees <- unlist(str_extract_all(x, \"\\\\b\\\\d{4}\\\\b\")) # Extraire toutes les années individuelles\n  depuis_annees <- as.integer(unlist(str_extract_all(x, regex(\"(?<=depuis )\\\\d{4}\", ignore_case = TRUE)))) # Extraire les années de départ pour \"depuis / Depuis\"\n  \n  # Traiter les plages d'années\n  plages <- str_extract_all(x, \"\\\\d{4}–\\\\d{4}\") # Extraire les plages d'années\n  plages <- unlist(plages)\n  for (plage in plages) {\n    annees_debut_fin <- as.integer(unlist(str_extract_all(plage, \"\\\\d{4}\")))\n    annees <- c(annees, seq(annees_debut_fin[1], annees_debut_fin[2], by = 4))\n  }\n  # Ajouter les éditions depuis les années spécifiques jusqu'à l'année actuelle\n  for (depuis_annee in depuis_annees) {\n    annees_depuis <- seq(depuis_annee, annee_actuelle, by = 4)\n    annees <- c(annees, annees_depuis)\n  }\n  # Calculer le nombre d'éditions uniques\n  nb_editions <- length(unique(as.integer(annees)))\n  \n  return(nb_editions)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions(2000)\ncalcul_nb_editions(\"1904–1924, depuis 1948\")\n```\n:::\n\n\nError in `UseMethod()`: ! no applicable method for 'calcul_nb_editions' applied to an object of class \"c('double', 'numeric')\" Backtrace: 1. global calcul_nb_editions(2000)\n\nR traite les nombres sans décimales non explicitement définis comme entiers (integer) en tant que nombres à virgule flottante (double), même s'ils sont sans partie décimale.\n\nIl faut donc définir une méthode calcul_nb_editions.double qui traite ou redirige simplement vers calcul_nb_editions.integer, en tenant compte que les nombres seront traités comme des double par défaut :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions.double <- function(x) {\n  # Appeler directement calcul_nb_editions.integer \ncalcul_nb_editions.integer(as.integer(x))}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_nb_editions(2000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\ncalcul_nb_editions(\"1904–1924, depuis 1948\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 26\n```\n:::\n:::\n\n\n## Question 8\n\nEn Athlétisme, le Finlandais Paavo Nurmi détient le record de médailles avec 12 médailles obtenues lors des JO d’hiver.\n\nImplémentez une fonction \\< calcul_medailles_individuelles\\> qui détermine le nombre de médaille maximal a été obtenu par un athlète lors d’olympiades. Note : s’il y a plusieurs athlètes à égalité, alors la cellule comporte plusieurs éléments, et une manipulation de la chaîne de caractères est nécessaire.\n\n-   Les jeux olympiques d'hiver se trouvent dans la list_tables, 2eme\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_hiver <- list_tables[[2]]\ndata_medailles_sport_hiver <- data_medailles_sport_hiver[-1,-1]\ndata_medailles_sport_hiver$Discipline\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Biathlon\"                            \n [2] \"Bobsleigh\"                           \n [3] \"Combiné nordique\"                    \n [4] \"Curling\"                             \n [5] \"Hockey sur glace\"                    \n [6] \"Luge\"                                \n [7] \"Patinage artistique\"                 \n [8] \"Patinage de vitesse\"                 \n [9] \"Patinage de vitesse sur piste courte\"\n[10] \"Saut à ski\"                          \n[11] \"Skeleton\"                            \n[12] \"Ski acrobatique\"                     \n[13] \"Ski alpin\"                           \n[14] \"Ski de fond\"                         \n[15] \"Snowboard\"                           \n```\n:::\n:::\n\n\nLa discipline Athétisme fait partie des jeux olympiques d'été et non d'hiver, alors je retourne au df été\n\nLa colonne N° 9 designe les **Athlète(s) avec le plus de médailles (Or-Argent-Bronze)**\n\n# TERMINER PLUS TARD\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalcul_medailles_individuelles <- function(athletes_medailles) {\n \n   # Étape 1: Extraire les nombres de médailles pour chaque athlète\n  patterns_medailles <- str_extract_all(athletes_medailles, \"\\\\((\\\\d+)-(\\\\d+)-(\\\\d+)\\\\)\")\n  medailles_liste <- lapply(patterns_medailles[[1]], function(x) {\n    nums <- as.numeric(unlist(str_split(x, \"-\")))\n    sum(nums)\n  })\n  \n  # Étape 2: Calculer le total de médailles pour chaque athlète\n  total_medailles <- unlist(medailles_liste)\n  \n  # Étape 3: Déterminer le maximum de médailles\n  max_medailles <- max(total_medailles)\n  \n  # Identifier les athlètes ayant le nombre maximal de médailles\n  indices_max <- which(total_medailles == max_medailles)\n  \n  # Extraire les noms des athlètes ayant le nombre maximal de médailles\n  noms_athletes_max <- str_extract_all(athletes_medailles, \"[^\\\\(]+\")[[1]][indices_max]\n  noms_athletes_max <- str_trim(noms_athletes_max) # Nettoyer les espaces\n  \n  return(noms_athletes_max)\n}\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n# TD 3\n\nPour ce td l'installation de plusieurs librairies a été necessaire, \"stringr\", \"lubridate\", \"arrow\", \"dplyr\", \"tidyr\", \"jsonlite\", \"RSQLite\".\n\nLes données associés au TP3 sont décompressés dans un dossier appelé \\<data\\>\n\n\n::: {.cell}\n\n:::\n\n\n## Question 1\n\nListez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(path = \"data/\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.sqlite\"                                                 \n[2] \"olympics_athletes.json\"                                      \n[3] \"paris-2024-sites-olympiques-et-paralympiques-franciliens.csv\"\n[4] \"tokyo_athletes.parquet\"                                      \n```\n:::\n:::\n\n\nLes extensions des différents fichiers dans le dossier data sont : sqlite, json et parquet\n\n## Question 2\n\nLisez le fichier .parquet en utilisant la librairie arrow. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntokyo_athletes <- read_parquet(file = \"data/tokyo_athletes.parquet\")\ndim(tokyo_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11085     3\n```\n:::\n\n```{.r .cell-code}\nnames(tokyo_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n```\n:::\n\n```{.r .cell-code}\nstr(tokyo_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [11,085 × 3] (S3: tbl_df/tbl/data.frame)\n $ Name      : chr [1:11085] \"AALERUD Katrine\" \"ABAD Nestor\" \"ABAGNALE Giovanni\" \"ABALDE Alberto\" ...\n $ NOC       : chr [1:11085] \"Norway\" \"Spain\" \"Italy\" \"Spain\" ...\n $ Discipline: chr [1:11085] \"Cycling Road\" \"Artistic Gymnastics\" \"Rowing\" \"Basketball\" ...\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\nLe fichier \\< tokyo_athletes.parquet \\> a 3 variables de type chr : \"Name\" \"NOC\" \"Discipline\" et 11085 observations\n\n## Question 3\n\nLisez le fichier .json en utilisant la librairie jsonlite. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- fromJSON(\"data/olympics_athletes.json\" )\ndim(olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 269731     13\n```\n:::\n\n```{.r .cell-code}\nnames(olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\nLe fichier \\< olympics_athletes.json \\> a 13 variables et 269731 observations.\n\nLes colonnes sont : \"ID\" \"Name\" \"Sex\" \"Age\" \"Height\" \"Weight\" \"Team\" \"NOC\" \"Games\" \"City\" \"Sport\" \"Event\" \"Medal\"\n\n## Question 4\n\nImportez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect. Le driver à utiliser sera SQLite(). Quelles sont les tables présentes dans la table ? Vous pourrez utiliser la fonction dbListTables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- dbConnect(RSQLite::SQLite(), dbname = \"data/data.sqlite\")\ntables <- dbListTables(con)\nprint(tables)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n```\n:::\n:::\n\n\nLes tables presentes dans la table sont : \"tokyo_medals\" \"tokyo_teams\"\n\n## Question 5\n\nCréez deux nouvelles tables dans la base de données à l’aide de la fonction dbWriteTable. Les tables s’appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbWriteTable(con, \"olympics_athletes\", olympics_athletes,  overwrite = TRUE ) \ndbWriteTable(con, \"tokyo_athletes\",tokyo_athletes,  overwrite = TRUE )\n\ndbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n```\n:::\n:::\n\n\n## Question 6\n\nInspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?\n\nLes colonnes sont :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListFields(con, \"olympics_athletes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\n## Question 7\n\nImportez cette table depuis la base de données en utilisant la fonction dbReadTable. Convertissez la table en tibble en utilisant la fonction as_tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- dbReadTable(con, \"olympics_athletes\") \n  olympics_athletes <- as_tibble(olympics_athletes)\nclass(olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n## Question 8\n\nConvertissez la colonne Sex en variable catégorielle avec la fonction mutate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- olympics_athletes |>\n  mutate(Sex = as.factor(Sex))\n\nstr(olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [269,731 × 13] (S3: tbl_df/tbl/data.frame)\n $ ID    : int [1:269731] 1 2 3 4 5 5 5 5 5 5 ...\n $ Name  : chr [1:269731] \"A Dijiang\" \"A Lamusi\" \"Gunnar Nielsen Aaby\" \"Edgar Lindenau Aabye\" ...\n $ Sex   : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 1 1 1 1 1 1 ...\n $ Age   : int [1:269731] 24 23 24 34 21 21 25 25 27 27 ...\n $ Height: int [1:269731] 180 170 NA NA 185 185 185 185 185 185 ...\n $ Weight: num [1:269731] 80 60 NA NA 82 82 82 82 82 82 ...\n $ Team  : chr [1:269731] \"China\" \"China\" \"Denmark\" \"Denmark/Sweden\" ...\n $ NOC   : chr [1:269731] \"CHN\" \"CHN\" \"DEN\" \"DEN\" ...\n $ Games : chr [1:269731] \"1992 Summer\" \"2012 Summer\" \"1920 Summer\" \"1900 Summer\" ...\n $ City  : chr [1:269731] \"Barcelona\" \"London\" \"Antwerpen\" \"Paris\" ...\n $ Sport : chr [1:269731] \"Basketball\" \"Judo\" \"Football\" \"Tug-Of-War\" ...\n $ Event : chr [1:269731] \"Basketball Men's Basketball\" \"Judo Men's Extra-Lightweight\" \"Football Men's Football\" \"Tug-Of-War Men's Tug-Of-War\" ...\n $ Medal : chr [1:269731] NA NA NA \"Gold\" ...\n```\n:::\n:::\n\n\n## Question 9\n\nCréez deux colonnes à partir de la colonne Games. La première colonne Year sera une colonne de type integer contenant l’année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d’été ou d’hiver. Vous pourrez utiliser la fonction separate_wider_delim de tidyr notamment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- olympics_athletes |>\n  separate(Games, into = c(\"Year\", \"isSummer\"), sep = \" \") |>\n  mutate(\n    Year = as.integer(Year),\n    isSummer = isSummer == \"Summer\"\n  )\n```\n:::\n\n\n## Question 10\n\n10\\. Calculez la moyenne d’age des athletes pour chacune des éditions des JO d’été. Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresultat <- olympics_athletes |>\n  filter(isSummer==TRUE)|>\n   group_by(Year)|>\n   summarise(age_moyenne = mean(Age, na.rm = TRUE)) |>\n  mutate(\n    plus_jeunes = age_moyenne== min(age_moyenne),\n    plus_vieux = age_moyenne == max(age_moyenne)\n  ) |>\n  filter(plus_jeunes | plus_vieux)\n\nresultat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n   Year age_moyenne plus_jeunes plus_vieux\n  <int>       <dbl> <lgl>       <lgl>     \n1  1896        23.6 TRUE        FALSE     \n2  1932        30.2 FALSE       TRUE      \n```\n:::\n:::\n\n\n## Question 11\n\nQuelle est la discipline des JO d’été dont la taille des athlètes féminines est la plus grande ? Quelle a été cette discipline au cours de chacune des éditions ? Calculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfemmes_taille_sport <- olympics_athletes |>\n  filter(Sex == \"F\", isSummer == TRUE)|>\n  group_by(Sport) |>\n  summarise(taille_moyenne = mean(Height, na.rm = TRUE)) |>\n  arrange(desc(taille_moyenne))|>\n  slice(1)\n\nfemmes_taille_sport\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  Sport      taille_moyenne\n  <chr>               <dbl>\n1 Basketball           182.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiscipline_plus_grandes_par_edition <- olympics_athletes |>\n  filter(Sex == \"F\", isSummer == TRUE) |>\n  group_by(Year, Sport) |>\n  summarise(taille_moyenne = mean(Height, na.rm = TRUE), .groups = \"drop\") |>\n  # Filtrer les lignes où la taille moyenne n'est pas NaN\n  filter(!is.na(taille_moyenne)) |>\n  group_by(Year) |>\n  slice_max(order_by = taille_moyenne, n = 1) |>\n  ungroup()\n\ndiscipline_plus_grandes_par_edition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 23 × 3\n    Year Sport         taille_moyenne\n   <int> <chr>                  <dbl>\n 1  1920 Swimming                166.\n 2  1924 Fencing                 168.\n 3  1928 Fencing                 172.\n 4  1932 Fencing                 173.\n 5  1936 Fencing                 178 \n 6  1948 Swimming                172.\n 7  1952 Athletics               168.\n 8  1956 Equestrianism           170.\n 9  1960 Athletics               169.\n10  1964 Volleyball              171.\n# ℹ 13 more rows\n```\n:::\n:::\n\n\n# -----------------------------------\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}