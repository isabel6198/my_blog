---
title: "Semaine 3"
format: 
  html:
    toc: true
    toc_float: 
      collapsed: false
      smooth_scroll: true
editor: visual
date: "2024-02-25"
image: "ext.png"
categories: [TD]
author: "Isabel"
---

# Librairies

```{r}
#| warning: false

# TD 3 
library(lubridate)
library(arrow)
library(dplyr)
library(tidyr)
library(jsonlite)
library(RSQLite)
```

```{r}
# penser à vérifer le chemin de travail et à le corriger si necessaire 
getwd()

```

```{r}
#| echo: false
setwd("/Users/Isabel/Desktop/Cours/R avancé/my_blog/posts/Exercices-TD")
```

# Semaine 3 - Exercices

## Questions N°

Pour ce td l'installation de plusieurs librairies a été necessaire, "stringr", "lubridate", "arrow", "dplyr", "tidyr", "jsonlite", "RSQLite".

Les données associés au TP3 sont décompressés dans un dossier appelé \<data\>

## 1. Listez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?

```{r}
list.files(path = "data/")

```

Les extensions des différents fichiers dans le dossier data sont : sqlite, json et parquet

## 2. Lisez le fichier .parquet en utilisant la librairie arrow. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?

```{r}
tokyo_athletes <- read_parquet(file = "data/tokyo_athletes.parquet")
dim(tokyo_athletes)
names(tokyo_athletes)
str(tokyo_athletes)
```

Le fichier \< tokyo_athletes.parquet \> a 3 variables de type chr : "Name" "NOC" "Discipline" et 11085 observations

## 3. Lisez le fichier .json en utilisant la librairie jsonlite. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?

```{r}
olympics_athletes <- fromJSON("data/olympics_athletes.json" )
dim(olympics_athletes)
names(olympics_athletes)
```

Le fichier \< olympics_athletes.json \> a 13 variables et 269731 observations.

Les colonnes sont : "ID" "Name" "Sex" "Age" "Height" "Weight" "Team" "NOC" "Games" "City" "Sport" "Event" "Medal"

## 4. Importez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect. Le driver à utiliser sera SQLite(). Quelles sont les tables présentes dans la table ? Vous pourrez utiliser la fonction dbListTables.

```{r}
con <- dbConnect(RSQLite::SQLite(), dbname = "data/data.sqlite")
tables <- dbListTables(con)
print(tables)

```

Les tables presentes dans la table sont : "tokyo_medals" "tokyo_teams"

## 5. Créez deux nouvelles tables dans la base de données à l’aide de la fonction dbWriteTable. Les tables s’appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.

```{r}
dbWriteTable(con, "olympics_athletes", olympics_athletes,  overwrite = TRUE ) 
dbWriteTable(con, "tokyo_athletes",tokyo_athletes,  overwrite = TRUE )

dbListTables(con)
```

## 6. Inspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?

Les colonnes sont :

```{r}
dbListFields(con, "olympics_athletes")
```

## 7. Importez cette table depuis la base de données en utilisant la fonction dbReadTable. Convertissez la table en tibble en utilisant la fonction as_tibble.

```{r}
olympics_athletes <- dbReadTable(con, "olympics_athletes") 
  olympics_athletes <- as_tibble(olympics_athletes)
class(olympics_athletes)
```

## 8. Convertissez la colonne Sex en variable catégorielle avec la fonction mutate.

```{r}
olympics_athletes <- olympics_athletes |>
  mutate(Sex = as.factor(Sex))

str(olympics_athletes)
```

## 9. Créez deux colonnes à partir de la colonne Games.

La première colonne Year sera une colonne de type integer contenant l’année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d’été ou d’hiver. Vous pourrez utiliser la fonction separate_wider_delim de tidyr notamment.

```{r}

olympics_athletes <- olympics_athletes |>
  separate(Games, into = c("Year", "isSummer"), sep = " ") |>
  mutate(
    Year = as.integer(Year),
    isSummer = isSummer == "Summer"
  )

```

## 10. Calculez la moyenne d’age des athletes pour chacune des éditions des JO d’été. Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?

```{r}

resultat <- olympics_athletes |>
  filter(isSummer==TRUE)|>
   group_by(Year)|>
   summarise(age_moyenne = mean(Age, na.rm = TRUE)) |>
  mutate(
    plus_jeunes = age_moyenne== min(age_moyenne),
    plus_vieux = age_moyenne == max(age_moyenne)
  ) |>
  filter(plus_jeunes | plus_vieux)

resultat
```

## 11. Quelle est la discipline des JO d’été dont la taille des athlètes féminines est la plus grande ?

```{r}
femmes_taille_sport <- olympics_athletes |>
  filter(Sex == "F", isSummer == TRUE)|>
  group_by(Sport) |>
  summarise(taille_moyenne = mean(Height, na.rm = TRUE)) |>
  arrange(desc(taille_moyenne))|>
  slice(1)

femmes_taille_sport

cat('La discipline avec la plus grande taille moyenne des athlètes féminines est :', femmes_taille_sport$Sport, 'avec une taille moyenne de', round(femmes_taille_sport$taille_moyenne, 2), 'cm.\n')

```

Quelle a été cette discipline au cours de chacune des éditions ? Calculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.

```{r}
discipline_plus_grandes_par_edition <- olympics_athletes |>
  filter(Sex == "F", isSummer == TRUE) |>
  group_by(Year, Sport) |>
  summarise(taille_moyenne = mean(Height, na.rm = TRUE), .groups = "drop") |>
  # Filtrer les lignes où la taille moyenne n'est pas NaN
  filter(!is.na(taille_moyenne)) |>
  group_by(Year) |>
  slice_max(order_by = taille_moyenne, n = 1) |>
  ungroup()

discipline_plus_grandes_par_edition

nombre_fois_sport <- discipline_plus_grandes_par_edition |>
  count(Sport, name = "Nombre_de_fois") |>
  arrange(desc(Nombre_de_fois))

cat("Nombre de fois où chaque discipline a été celle avec les athlètes féminines les plus grandes :\n")
print(nombre_fois_sport)


```
