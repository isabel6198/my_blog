{
  "hash": "cecf3c448393b472e9f6961fee0e7428",
  "result": {
    "markdown": "---\ntitle: \"Semaine 3\"\nformat: \n  html:\n    toc: true\n    toc_float: \n      collapsed: false\n      smooth_scroll: true\neditor: visual\ndate: \"2024-02-25\"\nimage: \"ext.png\"\ncategories: [TD]\nauthor: \"Isabel\"\n\n---\n\n\n# Librairies\n\n::: {.cell}\n\n```{.r .cell-code}\n# TD 3 \nlibrary(lubridate)\nlibrary(arrow)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(jsonlite)\nlibrary(RSQLite)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# penser à vérifer le chemin de travail et à le corriger si necessaire \ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/Isabel/Desktop/Cours/R avancé/my_blog/posts/Excercices-TD\"\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n# Semaine 3 - Excercices\n\n## Questions N°\n\nPour ce td l'installation de plusieurs librairies a été necessaire, \"stringr\", \"lubridate\", \"arrow\", \"dplyr\", \"tidyr\", \"jsonlite\", \"RSQLite\".\n\nLes données associés au TP3 sont décompressés dans un dossier appelé \\<data\\>\n\n## 1. Listez les fichiers présents dans le dossier data. Quelles sont les extensions des différents fichiers ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(path = \"data/\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.sqlite\"                                                 \n[2] \"olympics_athletes.json\"                                      \n[3] \"paris-2024-sites-olympiques-et-paralympiques-franciliens.csv\"\n[4] \"tokyo_athletes.parquet\"                                      \n```\n:::\n:::\n\n\nLes extensions des différents fichiers dans le dossier data sont : sqlite, json et parquet\n\n## 2. Lisez le fichier .parquet en utilisant la librairie arrow. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntokyo_athletes <- read_parquet(file = \"data/tokyo_athletes.parquet\")\ndim(tokyo_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11085     3\n```\n:::\n\n```{.r .cell-code}\nnames(tokyo_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Name\"       \"NOC\"        \"Discipline\"\n```\n:::\n\n```{.r .cell-code}\nstr(tokyo_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [11,085 × 3] (S3: tbl_df/tbl/data.frame)\n $ Name      : chr [1:11085] \"AALERUD Katrine\" \"ABAD Nestor\" \"ABAGNALE Giovanni\" \"ABALDE Alberto\" ...\n $ NOC       : chr [1:11085] \"Norway\" \"Spain\" \"Italy\" \"Spain\" ...\n $ Discipline: chr [1:11085] \"Cycling Road\" \"Artistic Gymnastics\" \"Rowing\" \"Basketball\" ...\n```\n:::\n:::\n\n\nLe fichier \\< tokyo_athletes.parquet \\> a 3 variables de type chr : \"Name\" \"NOC\" \"Discipline\" et 11085 observations\n\n## 3. Lisez le fichier .json en utilisant la librairie jsonlite. Quelles sont les dimensions de la table ? Quelles sont les colonnes présentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- fromJSON(\"data/olympics_athletes.json\" )\ndim(olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 269731     13\n```\n:::\n\n```{.r .cell-code}\nnames(olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\nLe fichier \\< olympics_athletes.json \\> a 13 variables et 269731 observations.\n\nLes colonnes sont : \"ID\" \"Name\" \"Sex\" \"Age\" \"Height\" \"Weight\" \"Team\" \"NOC\" \"Games\" \"City\" \"Sport\" \"Event\" \"Medal\"\n\n## 4. Importez la librairie RSQLite, et ouvrez une connexion à la base de données sqlite en utilisant la fonction dbConnect. Le driver à utiliser sera SQLite(). Quelles sont les tables présentes dans la table ? Vous pourrez utiliser la fonction dbListTables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- dbConnect(RSQLite::SQLite(), dbname = \"data/data.sqlite\")\ntables <- dbListTables(con)\nprint(tables)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n```\n:::\n:::\n\n\nLes tables presentes dans la table sont : \"tokyo_medals\" \"tokyo_teams\"\n\n## 5. Créez deux nouvelles tables dans la base de données à l’aide de la fonction dbWriteTable. Les tables s’appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbWriteTable(con, \"olympics_athletes\", olympics_athletes,  overwrite = TRUE ) \ndbWriteTable(con, \"tokyo_athletes\",tokyo_athletes,  overwrite = TRUE )\n\ndbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n```\n:::\n:::\n\n\n## 6. Inspectez la table olympics_athletes en utilisant la fonction dbListFields. Quelles sont les colonnes de la table ?\n\nLes colonnes sont :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListFields(con, \"olympics_athletes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\n## 7. Importez cette table depuis la base de données en utilisant la fonction dbReadTable. Convertissez la table en tibble en utilisant la fonction as_tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- dbReadTable(con, \"olympics_athletes\") \n  olympics_athletes <- as_tibble(olympics_athletes)\nclass(olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n## 8. Convertissez la colonne Sex en variable catégorielle avec la fonction mutate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- olympics_athletes |>\n  mutate(Sex = as.factor(Sex))\n\nstr(olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [269,731 × 13] (S3: tbl_df/tbl/data.frame)\n $ ID    : int [1:269731] 1 2 3 4 5 5 5 5 5 5 ...\n $ Name  : chr [1:269731] \"A Dijiang\" \"A Lamusi\" \"Gunnar Nielsen Aaby\" \"Edgar Lindenau Aabye\" ...\n $ Sex   : Factor w/ 2 levels \"F\",\"M\": 2 2 2 2 1 1 1 1 1 1 ...\n $ Age   : int [1:269731] 24 23 24 34 21 21 25 25 27 27 ...\n $ Height: int [1:269731] 180 170 NA NA 185 185 185 185 185 185 ...\n $ Weight: num [1:269731] 80 60 NA NA 82 82 82 82 82 82 ...\n $ Team  : chr [1:269731] \"China\" \"China\" \"Denmark\" \"Denmark/Sweden\" ...\n $ NOC   : chr [1:269731] \"CHN\" \"CHN\" \"DEN\" \"DEN\" ...\n $ Games : chr [1:269731] \"1992 Summer\" \"2012 Summer\" \"1920 Summer\" \"1900 Summer\" ...\n $ City  : chr [1:269731] \"Barcelona\" \"London\" \"Antwerpen\" \"Paris\" ...\n $ Sport : chr [1:269731] \"Basketball\" \"Judo\" \"Football\" \"Tug-Of-War\" ...\n $ Event : chr [1:269731] \"Basketball Men's Basketball\" \"Judo Men's Extra-Lightweight\" \"Football Men's Football\" \"Tug-Of-War Men's Tug-Of-War\" ...\n $ Medal : chr [1:269731] NA NA NA \"Gold\" ...\n```\n:::\n:::\n\n\n## 9. Créez deux colonnes à partir de la colonne Games.\n\nLa première colonne Year sera une colonne de type integer contenant l’année des jeux. La deuxième colonne isSummer sera une colonne booléenne qui indiquera si les jeux sont des jeux d’été ou d’hiver. Vous pourrez utiliser la fonction separate_wider_delim de tidyr notamment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- olympics_athletes |>\n  separate(Games, into = c(\"Year\", \"isSummer\"), sep = \" \") |>\n  mutate(\n    Year = as.integer(Year),\n    isSummer = isSummer == \"Summer\"\n  )\n```\n:::\n\n\n## 10. Calculez la moyenne d’age des athletes pour chacune des éditions des JO d’été. Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresultat <- olympics_athletes |>\n  filter(isSummer==TRUE)|>\n   group_by(Year)|>\n   summarise(age_moyenne = mean(Age, na.rm = TRUE)) |>\n  mutate(\n    plus_jeunes = age_moyenne== min(age_moyenne),\n    plus_vieux = age_moyenne == max(age_moyenne)\n  ) |>\n  filter(plus_jeunes | plus_vieux)\n\nresultat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n   Year age_moyenne plus_jeunes plus_vieux\n  <int>       <dbl> <lgl>       <lgl>     \n1  1896        23.6 TRUE        FALSE     \n2  1932        30.2 FALSE       TRUE      \n```\n:::\n:::\n\n\n## 11. Quelle est la discipline des JO d’été dont la taille des athlètes féminines est la plus grande ?\n\nQuelle a été cette discipline au cours de chacune des éditions ? Calculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfemmes_taille_sport <- olympics_athletes |>\n  filter(Sex == \"F\", isSummer == TRUE)|>\n  group_by(Sport) |>\n  summarise(taille_moyenne = mean(Height, na.rm = TRUE)) |>\n  arrange(desc(taille_moyenne))|>\n  slice(1)\n\nfemmes_taille_sport\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  Sport      taille_moyenne\n  <chr>               <dbl>\n1 Basketball           182.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiscipline_plus_grandes_par_edition <- olympics_athletes |>\n  filter(Sex == \"F\", isSummer == TRUE) |>\n  group_by(Year, Sport) |>\n  summarise(taille_moyenne = mean(Height, na.rm = TRUE), .groups = \"drop\") |>\n  # Filtrer les lignes où la taille moyenne n'est pas NaN\n  filter(!is.na(taille_moyenne)) |>\n  group_by(Year) |>\n  slice_max(order_by = taille_moyenne, n = 1) |>\n  ungroup()\n\ndiscipline_plus_grandes_par_edition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 23 × 3\n    Year Sport         taille_moyenne\n   <int> <chr>                  <dbl>\n 1  1920 Swimming                166.\n 2  1924 Fencing                 168.\n 3  1928 Fencing                 172.\n 4  1932 Fencing                 173.\n 5  1936 Fencing                 178 \n 6  1948 Swimming                172.\n 7  1952 Athletics               168.\n 8  1956 Equestrianism           170.\n 9  1960 Athletics               169.\n10  1964 Volleyball              171.\n# ℹ 13 more rows\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}