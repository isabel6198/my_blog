{
  "hash": "5d593033823da7e82605214ccce76611",
  "result": {
    "markdown": "---\ntitle: \"Semaine 1\"\nformat: \n  html:\n    toc: true\n    toc_float: \n      collapsed: false\n      smooth_scroll: true\neditor: visual\ndate: \"2024-02-25\"\nimage: \"exercice.png\"\ncategories: [TD]\nauthor: \"Isabel\"\n---\n\n# TD 1\n\n\\\nDans cette section, vous trouverez les solutions pour les exercices des semaines 1, 2 et 3, ainsi que les réponses aux questions posées dans l'exercice 4 et au cours de l'élaboration du projet.\n\nVoici quelques précisions avant de commencer :\n\n-   Il est important de noter que toutes les librairies nécessaires à la réalisation de ces exercices sont téléchargées dans la première partie. (l'installation de certains packages peut être requise avant l'utilisation de la librairie)\n\n-   L'encodage des caractères utilisé est UTF-8\n\n-   La licence MIT a été choisi pour ce projet\n\n-   La création d'un projet pour chaque ensemble d'exercices (par semaine) et de scripts a été réalisée afin de respecter les consignes et conseils. Cependant, ici, vous trouverez l'ensemble de toutes les semaines réunies\n\n\n#### Librairies\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# TD 1\nlibrary(geosphere)\nlibrary(tidygeocoder)\nlibrary(leaflet) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# penser à vérifer le chemin de travail et à le corriger si necessaire \ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/Isabel/Desktop/Cours/R avancé/my_blog/posts/Excercices-TD\"\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n# Exercices\n\nPour cet exercice, nous allons télécharger un jeu de données issu de <https://data.gouv.fr> sur les infrastructures olympiques des JO 2024 à Paris.\n\nL’objectif de cet exercice est d’utiliser uniquement des fonctions de R base. - pas de librairie tierce sauf mention contraire.\n\n## 2. Téléchargement jeu de données depuis le site\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://www.data.gouv.fr/fr/datasets/r/3f8ea372-3847-495d-9b93-c4a76d553166\"\ndata_ex <- read.csv(url, sep = \";\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(data_ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"geo_point\"                      \"nom\"                           \n[3] \"sites_olympiques_paralympiques\" \"sports\"                        \n```\n:::\n\n```{.r .cell-code}\ndim(data_ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 31  4\n```\n:::\n\n```{.r .cell-code}\nstr(data_ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t31 obs. of  4 variables:\n $ geo_point                     : chr  \"48.841319, 2.253076\" \"48.924388, 2.359871\" \"48.751095, 2.0759\" \"48.788046, 2.034987\" ...\n $ nom                           : chr  \"Parc des Princes\" \"Stade de France\" \"Golf national\" \"Vélodrome National de Saint-Quentin-en-Yvelines\" ...\n $ sites_olympiques_paralympiques: chr  \"Site olympique\" \"Site olympique,Site paralympique\" \"Site olympique\" \"Site olympique,Site paralympique\" ...\n $ sports                        : chr  \"Football\" \"Athlétisme,Para athlétisme,Rugby\" \"Golf\" \"Cyclisme sur piste,Para cyclisme sur piste\" ...\n```\n:::\n:::\n\n\nLe nombre de lignes est de 31 pour 4 colonnes nomées : geo_point, nom, sites_olympiques_paralympiques, sports\n\n## 3 et 4 Combien y a t’il de sites olympiques et paralympiques ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(data_ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            geo_point                                             nom\n1 48.841319, 2.253076                                Parc des Princes\n2 48.924388, 2.359871                                 Stade de France\n3   48.751095, 2.0759                                   Golf national\n4 48.788046, 2.034987 Vélodrome National de Saint-Quentin-en-Yvelines\n5  48.84732, 2.245501                             Stade Roland Garros\n6 48.911184, 2.546395                                Clichy-sous-Bois\n    sites_olympiques_paralympiques                                     sports\n1                   Site olympique                                   Football\n2 Site olympique,Site paralympique           Athlétisme,Para athlétisme,Rugby\n3                   Site olympique                                       Golf\n4 Site olympique,Site paralympique Cyclisme sur piste,Para cyclisme sur piste\n5 Site olympique,Site paralympique                Tennis,Tennis fauteuil,Boxe\n6                Site paralympique                    Para cyclisme sur route\n```\n:::\n\n```{.r .cell-code}\ntable(data_ex$sites_olympiques_paralympiques )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n                                                   Site olympique \n                               2                               10 \nSite olympique,Site paralympique                Site paralympique \n                              16                                3 \n```\n:::\n\n```{.r .cell-code}\nsites_olympiques <- 0\nsites_paralympique <- 0\n\nfor (site in data_ex$sites_olympiques_paralympiques) {\n  if( grepl(\"Site olympique\", site)) {\n    sites_olympiques <- sites_olympiques + 1\n  }\n  if(grepl(\"Site paralympique\", site)){\n    sites_paralympique <- sites_paralympique + 1\n  }\n}\n\nprint(paste(\"Il y a au total\", sites_olympiques, \"sites olympiques et\", sites_paralympique, \"sites paralympiques\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Il y a au total 26 sites olympiques et 19 sites paralympiques\"\n```\n:::\n:::\n\n\n## 5. Quels sont les sites qui accueillent plusieurs disciplines sportives ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsites_multi_sport <- data_ex[sapply(strsplit(data_ex$sports, \",\"), length) >1, ]\nprint(\"Les sites accueillant plusieurs disciplines sportives sont :\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Les sites accueillant plusieurs disciplines sportives sont :\"\n```\n:::\n\n```{.r .cell-code}\nprint(sites_multi_sport$nom)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Stade de France\"                                \n [2] \"Vélodrome National de Saint-Quentin-en-Yvelines\"\n [3] \"Stade Roland Garros\"                            \n [4] \"Arena Paris Sud 4 (Porte de Versailles)\"        \n [5] \"Pont d'Iéna\"                                    \n [6] \"Arena Bercy\"                                    \n [7] \"Arena Paris nord\"                               \n [8] \"Arena Paris Sud 6 (Porte de Versailles)\"        \n [9] \"Stade de la Concorde\"                           \n[10] \"Arena Champs de Mars\"                           \n[11] \"La Défense Arena\"                               \n[12] \"Stade nautique\"                                 \n[13] \"Arena Paris Sud 1 (Porte de Versailles)\"        \n[14] \"Stade Tour Eiffel\"                              \n[15] \"Arena La Chapelle\"                              \n[16] \"Centre aquatique\"                               \n[17] \"Château de Versailles\"                          \n[18] \"Grand Palais\"                                   \n[19] \"Invalides\"                                      \n```\n:::\n:::\n\n\n## 6. Quels sont les disciplines para-olympiques accueillies dans ces sites franciliens ?\n\n(franciliens = De l'Île-de-France)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_paralympique <- data_ex[grepl(\"Site paralympique\", data_ex$sites_olympiques_paralympiques), ]\n\ndisciplines_paralympiques <- unique(unlist(strsplit(data_paralympique$sports, \",\")))\n\nprint(paste(\"Les disciplines para-olympiques accueillies sont:\", paste(disciplines_paralympiques, collapse = \", \")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Les disciplines para-olympiques accueillies sont: Athlétisme, Para athlétisme, Rugby, Cyclisme sur piste, Para cyclisme sur piste, Tennis, Tennis fauteuil, Boxe, Para cyclisme sur route, Tennis de table, Para tennis de table, Basketball, Basket fauteuil, Gymnastique artistique, trampoline, Escrime, Pentathlon moderne, Volley-ball assis, Haltérophilie, Handball, Goalball, Judo, Para judo, Lutte, Rugby fauteuil, Natation, Para natation, Water-polo, Canoë, Para canoë, Aviron, Para aviron, Volleyball, Boccia, Volleyball de plage, Cécifoot, Badminton, Para Badminton, Gymnastique rythmique, Para powerlifting, Sports équestres, Para équitation, Escrime fauteuil, Taekwondo, Para taekwondo, Tir à l'arc, Para tir à l'arc, Cyclisme sur route\"\n```\n:::\n:::\n\n\n**Concernant le code :**\n\nLa fonction **strsplit** est utilisée pour diviser des chaînes de caractères en sous-composants en fonction d'un séparateur spécifié.\n\n**grepl** Est utile pour filtrer des données ou vérifier la présence de certaines sous-chaînes.\n\n**unlist** Transforme la liste en un vecteur unique, concaténant tous les éléments des différentes entrées en un seul vecteur long.\n\n**unique** Extrait les éléments uniques de ce vecteur, supprimant les répétitions.\n\n## 7. Quel(s) site(s) accueille(nt) le plus de disciplines différentes ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(strsplit(data_ex$sports, \",\"), function(x) length(unique(x)) )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 3 1 2 3 1 2 1 2 4 4 3 4 1 4 3 4 2 2 1 4 1 3 0 3 0 1 1 4 4 1\n```\n:::\n\n```{.r .cell-code}\nnombre_de_disciplines <- data.frame(site = data_ex$nom, \n                         nombre_disciplines = sapply(strsplit(data_ex$sports, \",\"), function(x) length(unique(x))))\n\nsites_nombre_disciplines <- nombre_de_disciplines[order                                            (-nombre_de_disciplines$nombre_disciplines),]\n\nsites_4_disciplines <- sites_nombre_disciplines[sites_nombre_disciplines$nombre_disciplines>3,]\n\nprint(paste(\"Les sites accueillant les plus de disciplines (4) sont :\", paste(sites_4_disciplines$site, collapse = \",\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Les sites accueillant les plus de disciplines (4) sont : Arena Bercy,Arena Paris nord,Stade de la Concorde,Arena Champs de Mars,Stade nautique,Arena La Chapelle,Grand Palais,Invalides\"\n```\n:::\n:::\n\n\n## 8. Quel discipline aura lieu sur le plus grand nombre de sites ? Quels sont ces sites ?\n\nPour répondre à la question, nous devons extraire les disciplines, les associer à chaque site et ensuite compter le nombre de sites par discipline:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsites_et_disciplines <- data.frame(\n  site = rep(data_ex$nom, sapply(data_ex$sports, function(x) length(strsplit(x, \",\")[[1]]))),\n  discipline = unlist(strsplit(data_ex$sports, \",\"))\n)\n\nnombre_sites_par_discipline <- aggregate(site ~ discipline, sites_et_disciplines, FUN = function(x) length(unique(x)))\n```\n:::\n\n\nAvec cet information, nous pouvons identifier la discipline qui est presente dans le plus grand nombre de sites :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiscipline_max_sites <- nombre_sites_par_discipline[which.max(nombre_sites_par_discipline$site), ]\ndiscipline_max_sites\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  discipline site\n1 Athlétisme    4\n```\n:::\n:::\n\n\nEt pour finir, nous pouvons voir les sites pour cette discipline :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset(sites_et_disciplines, discipline == discipline_max_sites$discipline)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      site discipline\n2          Stade de France Athlétisme\n14 Hôtel de ville de Paris Athlétisme\n16             Pont d'Iéna Athlétisme\n68               Invalides Athlétisme\n```\n:::\n:::\n\n\n## 9. A vol d’oiseau, quels sont les sites les deux sites les plus proches ?\n\nNous allons utiliser les coordonnées geographiques presentes dans la colonne geo_point et la fonction distHaversine, qui est une fonction du package geosphere pour calculer des distances sur une sphère entre deux points géolocalisés.\n\n(Selon la documentation du package **`geosphere`**, la fonction **`distHaversine`** retournera les résultats en mètres.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(data_ex$geo_point)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"48.841319, 2.253076\" \"48.924388, 2.359871\" \"48.751095, 2.0759\"  \n[4] \"48.788046, 2.034987\" \"48.84732, 2.245501\"  \"48.911184, 2.546395\"\n```\n:::\n:::\n\n\nComme nous pouvons le constater, la variable geo_point regroupe les coordonnées de latitude et de longitude. Par conséquent, nous allons les séparer en deux colonnes distinctes et les convertir en valeurs numériques:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- strsplit(as.character(data_ex$geo_point), \", \")\ndata_ex$latitude <- as.numeric(sapply(coords, `[`, 1))\ndata_ex$longitude <- as.numeric(sapply(coords, `[`, 2))\n```\n:::\n\n\nMaintenant nous pouvons calculer la matrice de distance entre tous les sites\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_matrix <- distm(data_ex[, c(\"longitude\", \"latitude\")], fun = distHaversine)\n\n# Remplacement de la diagonale par NA pour ignorer la distance de chaque site à lui-même\ndiag(dist_matrix) <- NA\n```\n:::\n\n\nPour identifier les deux sites ayant la distance la plus courte entre eux. Nous allons :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Trouver la distance la plus courte à l'aide de min\nmin_dist <- min(dist_matrix, na.rm = TRUE)\n\n# Identifier les sites les plus proches, on compare chaque élément de la matrice de distances \nsites_indices <- which(dist_matrix == min_dist, arr.ind = TRUE)\n\nsite1 <- data_ex$nom[sites_indices[1, 1]]  \nsite2 <- data_ex$nom[sites_indices[1, 2]]  \n\ncat(\"Les deux sites les plus proches à vol d'oiseau sont :\", site1, \"et\", site2,  \"avec une distance de\", round(min_dist), \"mètres.\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLes deux sites les plus proches à vol d'oiseau sont : Stade BMX de Saint-Quentin-en-Yvelines et Vélodrome National de Saint-Quentin-en-Yvelines avec une distance de 89 mètres.\n```\n:::\n:::\n\n\n## 10. Quels sont les deux sites les plus éloignés ?\n\nCette fois-ci, nous allons déterminer la distance maximale en utilisant la fonction max.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_dist <- max(dist_matrix, na.rm = TRUE)\n```\n:::\n\n\nEt maintenant, comme nous l'avons fait précédemment, nous pouvons identifier les indices correspondant à la distance maximale afin de déterminer les deux sites concernés.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsites_indices_max <- which(dist_matrix == max_dist, arr.ind = TRUE)\nsite1_max <- data_ex$nom[sites_indices_max[1, 1]]  \nsite2_max <- data_ex$nom[sites_indices_max[1, 2]] \ncat(\"Les deux sites les plus éloignés à vol d'oiseau sont :\", site1_max, \"et\", site2_max,  \"avec une distance de\", round(max_dist), \"mètres.\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLes deux sites les plus éloignés à vol d'oiseau sont : Colline d'Elancourt et Stade nautique avec une distance de 49689 mètres.\n```\n:::\n:::\n\n\n## 11. Où se situe le barycentre de l’ensemble des sites olympiques\n\nNous allons calculer les moyennes des latitudes et des longitudes pour trouver le barycentre.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarycentre_lat <- mean(data_ex$latitude)\nbarycentre_lon <- mean(data_ex$longitude)\ncat(\"L'appartement situé au barycentre de l'ensemble des sites olympiques se trouve à la latitude :\", barycentre_lat, \"et à la longitude :\", barycentre_lon, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nL'appartement situé au barycentre de l'ensemble des sites olympiques se trouve à la latitude : 48.86684 et à la longitude : 2.29757 \n```\n:::\n:::\n\n\nMaintenant, grâce à la fonction reverse_geocode, nous pourrons identifier l'adresse. Il est important de noter que reverse_geocode nécessite un argument de type .tbl (par exemple, un dataframe) pour fonctionner correctement. Nous enregistrerons donc les coordonnées dans un dataframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarycentre_df <- data.frame(\n  lat = barycentre_lat,\n  long = barycentre_lon\n)\n\nbarycentre_adresse <- reverse_geocode(\n  .tbl = barycentre_df, \n  lat = lat, \n  long = long,\n  method = \"osm\" # Utilise OpenStreetMap pour le géocodage inverse\n)\n\nprint(barycentre_adresse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n    lat  long address                                                           \n  <dbl> <dbl> <chr>                                                             \n1  48.9  2.30 23, Avenue Pierre 1er de Serbie, Quartier de Chaillot, Paris 16e …\n```\n:::\n:::\n\n\n::: callout-tip\n## Bonus - carte\n\nAvec la question 11, nous arrivons à la fin des exercices de la semaine 1. Avant de continuer avec les exercices de la semaine 2, nous pouvons créer un graphique qui utilise le dataframe barycentre_adresse et la fonction leaflet pour visualiser sur une carte l'adresse que nous avons obtenuetre_adresse et la fonction leaflet pour visualiser dans une carte l'adresse que nous avons obtenue.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleaflet(data = barycentre_adresse) |>\n  addTiles() |>\n  addMarkers(~long, ~lat, popup = ~address)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-942b94db9b832886e0a2\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-942b94db9b832886e0a2\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[48.8668434516129,2.297569580645161,null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},\"23, Avenue Pierre 1er de Serbie, Quartier de Chaillot, Paris 16e Arrondissement, Paris, Île-de-France, France métropolitaine, 75116, France\",null,null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[48.8668434516129,48.8668434516129],\"lng\":[2.297569580645161,2.297569580645161]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/leaflet-binding-2.2.1/leaflet.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}